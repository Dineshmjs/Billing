{"ast":null,"code":"var _jsxFileName = \"/home/spe/Desktop/Billing/src/component/address/InputEntry.js\";\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport './index.css';\nimport { http } from '../../axios';\n\nfunction InputEntry({\n  Reload\n}) {\n  const initialValues = {\n    name: \"\",\n    gstin: \"\",\n    contact: \"\",\n    email: \"\",\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    country: \"\",\n    pincode: \"\"\n  };\n\n  const submit = (values, submitProps) => {\n    console.log(\"form values\", values);\n    http.post(\"address\", values).then(res => {\n      console.log(res.data);\n      Reload(res.data._id);\n    }).catch(err => {\n      console.log(err);\n    });\n    submitProps.resetForm();\n  };\n\n  const validationSchema = yup.object({\n    name: yup.string().required(\"Please Enter Name\"),\n    gstin: yup.string().required(\"Please Enter GSTIN\"),\n    contact: yup.number().required(\"Please Enter Mobile No\"),\n    email: yup.string().email(\"Invalid Email\").required(\"Please Enter Email-Id \"),\n    address: yup.string().required(\"Please Enter Address\"),\n    city: yup.string().required(\"Please Enter City\"),\n    state: yup.string().required(\"Please Enter State\"),\n    country: yup.string().required(\"Please Enter Country\"),\n    pincode: yup.number().required(\"Please Enter Pincode\")\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, formiklog => {\n    console.log(formiklog);\n    return null;\n  }));\n}\n\nexport default InputEntry;","map":{"version":3,"sources":["/home/spe/Desktop/Billing/src/component/address/InputEntry.js"],"names":["React","Formik","Form","Field","ErrorMessage","yup","http","InputEntry","Reload","initialValues","name","gstin","contact","email","address","city","state","country","pincode","submit","values","submitProps","console","log","post","then","res","data","_id","catch","err","resetForm","validationSchema","object","string","required","number","formiklog"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAO,aAAP;AACA,SAASC,IAAT,QAAqB,aAArB;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAgC;AAG5B,QAAMC,aAAa,GAAG;AAClBC,IAAAA,IAAI,EAAE,EADY;AAElBC,IAAAA,KAAK,EAAE,EAFW;AAGlBC,IAAAA,OAAO,EAAE,EAHS;AAIlBC,IAAAA,KAAK,EAAE,EAJW;AAKlBC,IAAAA,OAAO,EAAE,EALS;AAMlBC,IAAAA,IAAI,EAAE,EANY;AAOlBC,IAAAA,KAAK,EAAE,EAPW;AAQlBC,IAAAA,OAAO,EAAE,EARS;AASlBC,IAAAA,OAAO,EAAE;AATS,GAAtB;;AAYA,QAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,MAA3B;AACAd,IAAAA,IAAI,CAACkB,IAAL,CAAU,SAAV,EAAqBJ,MAArB,EACKK,IADL,CACUC,GAAG,IAAI;AACTJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACC,IAAhB;AACAnB,MAAAA,MAAM,CAACkB,GAAG,CAACC,IAAJ,CAASC,GAAV,CAAN;AAEH,KALL,EAMKC,KANL,CAMWC,GAAG,IAAI;AACVR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACH,KARL;AASAT,IAAAA,WAAW,CAACU,SAAZ;AACH,GAZD;;AAcA,QAAMC,gBAAgB,GAAG3B,GAAG,CAAC4B,MAAJ,CAAW;AAChCvB,IAAAA,IAAI,EAAEL,GAAG,CAAC6B,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB,CAD0B;AAEhCxB,IAAAA,KAAK,EAAEN,GAAG,CAAC6B,MAAJ,GAAaC,QAAb,CAAsB,oBAAtB,CAFyB;AAGhCvB,IAAAA,OAAO,EAAEP,GAAG,CAAC+B,MAAJ,GAAaD,QAAb,CAAsB,wBAAtB,CAHuB;AAIhCtB,IAAAA,KAAK,EAAER,GAAG,CAAC6B,MAAJ,GAAarB,KAAb,CAAmB,eAAnB,EAAoCsB,QAApC,CAA6C,wBAA7C,CAJyB;AAKhCrB,IAAAA,OAAO,EAAET,GAAG,CAAC6B,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB,CALuB;AAMhCpB,IAAAA,IAAI,EAAEV,GAAG,CAAC6B,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB,CAN0B;AAOhCnB,IAAAA,KAAK,EAAEX,GAAG,CAAC6B,MAAJ,GAAaC,QAAb,CAAsB,oBAAtB,CAPyB;AAQhClB,IAAAA,OAAO,EAAEZ,GAAG,CAAC6B,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB,CARuB;AAShCjB,IAAAA,OAAO,EAAEb,GAAG,CAAC+B,MAAJ,GAAaD,QAAb,CAAsB,sBAAtB;AATuB,GAAX,CAAzB;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGSE,SAAD,IAAe;AACXf,IAAAA,OAAO,CAACC,GAAR,CAAYc,SAAZ;AACA,WAAQ,IAAR;AACH,GANT,CADJ,CADJ;AAiEH;;AAED,eAAe9B,UAAf","sourcesContent":["import React from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport * as yup from 'yup'\nimport './index.css'\nimport { http } from '../../axios'\n\nfunction InputEntry({ Reload }) {\n\n\n    const initialValues = {\n        name: \"\",\n        gstin: \"\",\n        contact: \"\",\n        email: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        country: \"\",\n        pincode: \"\"\n    }\n\n    const submit = (values, submitProps) => {\n        console.log(\"form values\", values)\n        http.post(\"address\", values)\n            .then(res => {\n                console.log(res.data)\n                Reload(res.data._id)\n\n            })\n            .catch(err => {\n                console.log(err)\n            })\n        submitProps.resetForm()\n    }\n\n    const validationSchema = yup.object({\n        name: yup.string().required(\"Please Enter Name\"),\n        gstin: yup.string().required(\"Please Enter GSTIN\"),\n        contact: yup.number().required(\"Please Enter Mobile No\"),\n        email: yup.string().email(\"Invalid Email\").required(\"Please Enter Email-Id \"),\n        address: yup.string().required(\"Please Enter Address\"),\n        city: yup.string().required(\"Please Enter City\"),\n        state: yup.string().required(\"Please Enter State\"),\n        country: yup.string().required(\"Please Enter Country\"),\n        pincode: yup.number().required(\"Please Enter Pincode\")\n    })\n    return (\n        <div className=\"container mt-3\">\n            <Formik>\n                {\n\n                    (formiklog) => {\n                        console.log(formiklog)\n                        return (null)\n                    }\n                }\n            </Formik>\n            {/* <Formik\n                initialValues={initialValues}\n                onSubmit={submit}\n                validationSchema={validationSchema}\n            >\n                \n                <Form className=\"form\">\n                    <div className=\"form-group\">\n                        <Field name=\"name\" type=\"text\" placeholder=\"Enter Name Of The Company\" className=\"form-control\" />\n                        <ErrorMessage name=\"name\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <Field name=\"gstin\" type=\"text\" placeholder=\"Company GSTIN NO\" className=\"form-control\" />\n                        <ErrorMessage name=\"gstin\" />\n                    </div>\n                    <div className=\"contactDetails\">\n                        <div className=\"form-group\">\n                            <Field name=\"contact\" type=\"number\" placeholder=\"Enter Mobile No\" className=\"form-control\" />\n                            <ErrorMessage name=\"contact\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <Field name=\"email\" type=\"text\" placeholder=\"Enter Email Id\" className=\"form-control\" />\n                            <ErrorMessage name=\"email\" />\n                        </div>\n                    </div>                   \n                    <div className=\"form-group\">\n                        <Field name=\"address\" type=\"text\" placeholder=\"Eg : Door No, Street, Area Name\" className=\"form-control\" />\n                        <ErrorMessage name=\"address\" />\n                    </div>\n                    <div className=\"addressInput\">\n                        <div className=\"form-group\">\n                            <Field name=\"city\" type=\"text\"  placeholder=\"Enter City\"  className=\"form-control\" />\n                            <ErrorMessage  name=\"city\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <Field name=\"state\" type=\"text\" placeholder=\"Enter State\" className=\"form-control\" />\n                            <ErrorMessage  name=\"state\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <Field name=\"country\" type=\"text\" placeholder=\"Enter Country\"  className=\"form-control\" />\n                            <ErrorMessage  name=\"country\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <Field name=\"pincode\" type=\"number\" placeholder=\"Enter Pincode\" className=\"form-control\" />\n                            <ErrorMessage  name=\"pincode\" />\n                        </div>\n                    </div>\n                    <div className=\"form-group w3-center\">\n                        <button className=\"w3-button w3-purple\" type=\"submit\">Submit</button>\n                    </div>\n                </Form>\n            </Formik> */}\n        </div>\n    )\n}\n\nexport default InputEntry\n"]},"metadata":{},"sourceType":"module"}